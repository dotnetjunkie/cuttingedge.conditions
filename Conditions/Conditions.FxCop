<?xml version="1.0" encoding="utf-8"?>
<FxCopProject Version="1.36" Name="CuttingEdge.Conditions FxCop Project">
 <ProjectOptions>
  <SharedProject>True</SharedProject>
  <Stylesheet Apply="False">c:\program files\microsoft fxcop 1.36\Xml\FxCopReport.xsl</Stylesheet>
  <SaveMessages>
   <Project Status="Active, Excluded" NewOnly="False" />
   <Report Status="Active" NewOnly="False" />
  </SaveMessages>
  <ProjectFile Compress="True" DefaultTargetCheck="True" DefaultRuleCheck="True" SaveByRuleGroup="" Deterministic="True" />
  <EnableControlFlowAnalysis>True</EnableControlFlowAnalysis>
  <EnableMultithreadedLoad>True</EnableMultithreadedLoad>
  <EnableMultithreadedAnalysis>True</EnableMultithreadedAnalysis>
  <SourceLookup>True</SourceLookup>
  <AnalysisExceptionsThreshold>10</AnalysisExceptionsThreshold>
  <RuleExceptionsThreshold>1</RuleExceptionsThreshold>
  <Spelling Locale="en-US" />
  <OverrideRuleVisibilities>False</OverrideRuleVisibilities>
  <CustomDictionaries SearchFxCopDir="True" SearchUserProfile="True" SearchProjectDir="True" />
  <SearchGlobalAssemblyCache>True</SearchGlobalAssemblyCache>
  <DeadlockDetectionTimeout>120</DeadlockDetectionTimeout>
  <IgnoreGeneratedCode>False</IgnoreGeneratedCode>
 </ProjectOptions>
 <Targets>
  <Target Name="$(ProjectDir)/CuttingEdge.Conditions/bin/Release/CuttingEdge.Conditions.dll" Analyze="True" AnalyzeAllChildren="True" />
 </Targets>
 <Rules>
  <RuleFiles>
   <RuleFile Name="$(FxCopDir)\Rules\DesignRules.dll" Enabled="True" AllRulesEnabled="False">
    <Rule Name="AbstractTypesShouldNotHaveConstructors" Enabled="True" />
    <Rule Name="AssembliesShouldHaveValidStrongNames" Enabled="True" />
    <Rule Name="AvoidEmptyInterfaces" Enabled="True" />
    <Rule Name="AvoidExcessiveParametersOnGenericTypes" Enabled="True" />
    <Rule Name="AvoidNamespacesWithFewTypes" Enabled="True" />
    <Rule Name="AvoidOutParameters" Enabled="True" />
    <Rule Name="CollectionsShouldImplementGenericInterface" Enabled="True" />
    <Rule Name="ConsiderPassingBaseTypesAsParameters" Enabled="True" />
    <Rule Name="DeclareEventHandlersCorrectly" Enabled="True" />
    <Rule Name="DeclareTypesInNamespaces" Enabled="True" />
    <Rule Name="DefaultParametersShouldNotBeUsed" Enabled="True" />
    <Rule Name="DefineAccessorsForAttributeArguments" Enabled="True" />
    <Rule Name="DoNotCatchGeneralExceptionTypes" Enabled="True" />
    <Rule Name="DoNotDeclareProtectedMembersInSealedTypes" Enabled="True" />
    <Rule Name="DoNotDeclareStaticMembersOnGenericTypes" Enabled="True" />
    <Rule Name="DoNotDeclareVirtualMembersInSealedTypes" Enabled="True" />
    <Rule Name="DoNotDeclareVisibleInstanceFields" Enabled="True" />
    <Rule Name="DoNotExposeGenericLists" Enabled="True" />
    <Rule Name="DoNotHideBaseClassMethods" Enabled="True" />
    <Rule Name="DoNotOverloadOperatorEqualsOnReferenceTypes" Enabled="True" />
    <Rule Name="DoNotPassTypesByReference" Enabled="True" />
    <Rule Name="DoNotRaiseExceptionsInUnexpectedLocations" Enabled="True" />
    <Rule Name="EnumeratorsShouldBeStronglyTyped" Enabled="True" />
    <Rule Name="EnumsShouldHaveZeroValue" Enabled="True" />
    <Rule Name="EnumStorageShouldBeInt32" Enabled="True" />
    <Rule Name="ExceptionsShouldBePublic" Enabled="True" />
    <Rule Name="GenericMethodsShouldProvideTypeParameter" Enabled="True" />
    <Rule Name="ICollectionImplementationsHaveStronglyTypedMembers" Enabled="True" />
    <Rule Name="ImplementIDisposableCorrectly" Enabled="True" />
    <Rule Name="ImplementStandardExceptionConstructors" Enabled="True" />
    <Rule Name="IndexersShouldNotBeMultidimensional" Enabled="True" />
    <Rule Name="InterfaceMethodsShouldBeCallableByChildTypes" Enabled="True" />
    <Rule Name="ListsAreStronglyTyped" Enabled="True" />
    <Rule Name="MarkAssembliesWithAssemblyVersion" Enabled="True" />
    <Rule Name="MarkAssembliesWithClsCompliant" Enabled="True" />
    <Rule Name="MarkAssembliesWithComVisible" Enabled="True" />
    <Rule Name="MarkAttributesWithAttributeUsage" Enabled="True" />
    <Rule Name="MarkEnumsWithFlags" Enabled="True" />
    <Rule Name="MembersShouldNotExposeCertainConcreteTypes" Enabled="True" />
    <Rule Name="MovePInvokesToNativeMethodsClass" Enabled="True" />
    <Rule Name="NestedTypesShouldNotBeVisible" Enabled="True" />
    <Rule Name="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Enabled="True" />
    <Rule Name="OverrideMethodsOnComparableTypes" Enabled="True" />
    <Rule Name="PropertiesShouldNotBeWriteOnly" Enabled="True" />
    <Rule Name="ProvideObsoleteAttributeMessage" Enabled="True" />
    <Rule Name="ReplaceRepetitiveArgumentsWithParamsArray" Enabled="True" />
    <Rule Name="StaticHolderTypesShouldBeSealed" Enabled="True" />
    <Rule Name="StaticHolderTypesShouldNotHaveConstructors" Enabled="True" />
    <Rule Name="StringUriOverloadsCallSystemUriOverloads" Enabled="True" />
    <Rule Name="TypesShouldNotExtendCertainBaseTypes" Enabled="True" />
    <Rule Name="TypesThatOwnDisposableFieldsShouldBeDisposable" Enabled="True" />
    <Rule Name="TypesThatOwnNativeResourcesShouldBeDisposable" Enabled="True" />
    <Rule Name="UriParametersShouldNotBeStrings" Enabled="True" />
    <Rule Name="UriPropertiesShouldNotBeStrings" Enabled="True" />
    <Rule Name="UriReturnValuesShouldNotBeStrings" Enabled="True" />
    <Rule Name="UseEventsWhereAppropriate" Enabled="True" />
    <Rule Name="UseGenericEventHandlerInstances" Enabled="True" />
    <Rule Name="UseGenericsWhereAppropriate" Enabled="True" />
    <Rule Name="UseIntegralOrStringArgumentForIndexers" Enabled="True" />
    <Rule Name="UsePropertiesWhereAppropriate" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\GlobalizationRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\InteroperabilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\MobilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\NamingRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\PerformanceRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\PortabilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\SecurityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\UsageRules.dll" Enabled="True" AllRulesEnabled="True" />
  </RuleFiles>
  <Groups />
  <Settings />
 </Rules>
 <FxCopReport Version="1.36">
  <Namespaces>
   <Namespace Name="CuttingEdge.Conditions">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Excluded" Created="2008-07-05 00:00:00Z">
      <Issue>
       <Item>CuttingEdge.Conditions</Item>
      </Issue>
      <Notes>
       <User Name="Steven">
        <Note Id="0" />
       </User>
      </Notes>
     </Message>
    </Messages>
   </Namespace>
  </Namespaces>
  <Targets>
   <Target Name="$(ProjectDir)/CuttingEdge.Conditions/bin/Release/CuttingEdge.Conditions.dll">
    <Modules>
     <Module Name="cuttingedge.conditions.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2008-08-07 11:33:06Z">
        <Issue Name="NoStrongName">
         <Item>'CuttingEdge.Conditions.dll'</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="CuttingEdge.Conditions">
        <Types>
         <Type Name="PostconditionException">
          <Messages>
           <Message Id="Postcondition" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Excluded" Created="2008-07-05 00:00:00Z">
            <Issue Name="Type">
             <Item>Postcondition</Item>
             <Item>'PostconditionException'</Item>
            </Issue>
            <Notes>
             <User Name="Steven">
              <Note Id="5" />
             </User>
            </Notes>
           </Message>
          </Messages>
         </Type>
         <Type Name="ConditionValidator`1">
          <Members>
           <Member Name="#ArgumentName">
            <Messages>
             <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Excluded" Created="2008-07-05 00:00:00Z">
              <Issue>
               <Item>'ConditionValidator&lt;T&gt;.ArgumentName'</Item>
              </Issue>
              <Notes>
               <User Name="Steven">
                <Note Id="3" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetType()">
            <Messages>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Excluded" Created="2008-07-05 00:00:00Z">
              <Issue Certainty="50">
               <Item>'ConditionValidator&lt;T&gt;.GetType()'</Item>
              </Issue>
              <Notes>
               <User Name="Steven">
                <Note Id="1" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Value">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Excluded" Created="2008-07-05 00:00:00Z">
              <Issue>
               <Item>'ConditionValidator&lt;T&gt;.Value'</Item>
               <Item>'T'</Item>
              </Issue>
              <Notes>
               <User Name="Steven">
                <Note Id="4" />
               </User>
              </Notes>
             </Message>
             <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Excluded" Created="2008-07-05 00:00:00Z">
              <Issue>
               <Item>'ConditionValidator&lt;T&gt;.Value'</Item>
              </Issue>
              <Notes>
               <User Name="Steven">
                <Note Id="2" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
      <Resources>
       <Resource Name="CuttingEdge.Conditions.ExceptionMessages.resources">
        <Messages>
         <Message Id="Postcondition" TypeName="ResourceStringsShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1703" Status="Excluded" Created="2008-07-10 12:51:11Z">
          <Issue Name="StringResource">
           <Item>'CuttingEdge.Conditions.ExceptionMessages.resx'</Item>
           <Item>PostconditionFailed</Item>
           <Item>Postcondition</Item>
           <Item>Postcondition failed.</Item>
          </Issue>
          <Issue Name="StringResource">
           <Item>'CuttingEdge.Conditions.ExceptionMessages.resx'</Item>
           <Item>PostconditionXFailed</Item>
           <Item>Postcondition</Item>
           <Item>Postcondition '{0}' failed.</Item>
          </Issue>
          <Notes>
           <User Name="Steven">
            <Note Id="6" />
           </User>
          </Notes>
         </Message>
        </Messages>
       </Resource>
      </Resources>
     </Module>
    </Modules>
   </Target>
  </Targets>
  <Notes>
   <User Name="Steven">
    <Note Id="0" Modified="2008-07-05 00:00:00Z">The CuttingEdge.Conditions is the only namespace of the library and the namespace can therefore not be merged with another namespace.</Note>
    <Note Id="1" Modified="2008-07-05 00:00:00Z">This check is completely valid, but the 'public new Type GetType()' method is used to be able to attach a EditorBrowsableAttrubute to the GetType method, which will hide the method when the user browses the methods of the ConditionValidator class with IntelliSense. The GetType method has no value for the user who will only use this class for validation.</Note>
    <Note Id="2" Modified="2008-07-05 00:00:00Z">We made the field deliberately public. We want to make sure we have the best performance and this field will never be used for data binding.</Note>
    <Note Id="3" Modified="2008-07-05 00:00:00Z">We made the field deliberately public. We want to make sure we have the best performance and this field will never be used for data binding.</Note>
    <Note Id="4" Modified="2008-07-05 00:00:00Z">The rule is correct. We tried to make ConditionValidator&lt;T&gt; immutable, but the validated type T can indeed be mutable (a collection for example). However, for us it's enough to be sure that the value or the reference to the value won't change.</Note>
    <Note Id="5" Modified="2008-07-05 00:00:00Z">Postcondition is a single word. See: http://en.wikipedia.org/wiki/Postcondition.</Note>
    <Note Id="6" Modified="2008-07-05 00:00:00Z">Postcondition is a single word. See: http://en.wikipedia.org/wiki/Postcondition.</Note>
    <Note Id="7" Modified="2008-08-07 11:51:26Z">The static constructor is needed because we need an TypeInitializationException to be thrown when the given generic type isn't valid.</Note>
    <Note Id="8" Modified="2008-08-07 12:01:04Z">There is no good alternative for this design. The other possible design would be the use of an System.Type parameter, but in that case it would be impossible to have the same compile time support as the generic type constraint currently does.</Note>
    <Note Id="9" Modified="2008-09-11 14:14:31Z">There is no good alternative for this design. The other possible design would be the use of an System.Type parameter, but in that case it would be impossible to have the same compile time support as the generic type constraint currently does.</Note>
   </User>
  </Notes>
  <Rules>
   <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
    <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   </Rule>
   <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
    <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   </Rule>
   <Rule TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104">
    <Resolution Name="Default">Remove the read-only designation from {0} or change the field to one that is an immutable reference type. If the reference type {1} is, in fact, immutable, exclude this message.</Resolution>
   </Rule>
   <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
    <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   </Rule>
   <Rule TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004">
    <Resolution Name="Default">Consider a design where {0} doesn't require explicit type parameter {1} in any call to it.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
    <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   </Rule>
   <Rule TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810">
    <Resolution Name="Default">Initialize all static fields in {0} when those fields are declared and remove the explicit static constructor.</Resolution>
   </Rule>
   <Rule TypeName="ResourceStringsShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1703">
    <Resolution Name="StringResource">In resource {0}, referenced by name '{1}', correct the spelling of '{2}' in string value '{3}'.</Resolution>
   </Rule>
   <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
    <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   </Rule>
  </Rules>
 </FxCopReport>
</FxCopProject>
